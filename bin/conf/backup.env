#!/bin/bash

# Copyright (C) 2018  Emmanuel Vargas <emmanuel.vargas@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## General static environment
LOG_PATH="/var/log"
SNAPSHOT_DST="/data/backup/snapshot" #destination folder
NAME="snapshot" #backup name
MIN_MIBSIZE=5000 # older snapshots (except snapshot.001) are removed if free disk <= MIN_MIBSIZE. the script may exit without performing a backup if free disk is still short.
MAX_MIBSIZE=20000 # older snapshots (except snapshot.001) are removed if their size >= MAX_MIBSIZE. the script performs a backup even if their size is too big.
OVERWRITE_LAST=0 # if free disk space is too small, then this option let us remove snapshot.001 as well and retry once
MD5LIST=0 #to compute a list of md5 integrity signatures of all backuped files, need 'rsync-list.sh'
CHATTR_OPT=0 # to use 'chattr' command and protect the backups again modification and deletion  ### Not use anymore since version 1.1.0
DU=0 # to use 'du' command and calculate the size of existing backups, disable it if you have many backups and it is getting too slow (for example on BACKUPSERVER)
CHECK_DISK_SPACE=0 # check needed space for backup, enable it to perform check before backup
SENDMAIL=false
MAIL_FROM='youremail@toto.net'
MAIL_TO='youremail@toto.net'
ERROR_LOG_SQL=""
SERVERS_TO_BACKUP=""
SERVERS_BACKUPED=""
SERVERS_NOT_BACKUPED=""
#RM_RANGE=$(echo {600..60..30} {50..30..10} {25..10..5}) #Define the backup range to keep; default: keep the 9st last backup, then 1 of 5 between 10th and 25th, then 1 of 10 between 30th and 50th, then 1 of 30 between 60th and 600th
RM_RANGE=$(echo {400..80..60} {60..30..20} {25..5..5}) #Define the backup range to keep; default: keep the 9st last backup, then 1 of 5 between 10th and 25th, then 1 of 10 between 30th and 50th, then 1 of 30 between 60th and 600th
SSH_KEY="/data/backup/.ssh/YOUR_RSA_KEY"
REGION="EMEA"
WARNING_SIZE_INCREASE_RATIO="1.05"
OPTION="--stats \
  --recursive \
  --links \
  --perms \
  --times \
  --group \
  --owner \
  --hard-links \
  --numeric-ids \
  --delete \
  --delete-excluded \
  --no-human-readable "
#  --timeout=1800"
#  --bwlimit=${BWLIMIT}"
#  --devices \
#  --progress
#  --size-only
#  --stop-at
#  --time-limit
#  --sparse

## General dynamic environment
APP_NAME="$(basename "$0")"
APP_PATH=$(cd `dirname $0`; pwd)
cd `dirname $0`
PID_PATH="/tmp"
RSYNC="$(which rsync)"
SCP="$(which scp)"
SSH="$(which ssh)"
CHATTR="$(which chattr)"
MKDIR="$(which mkdir)"
CHMOD="$(which chmod)"
GZIP="$(which gzip)"
MYSQL="$(which mysql)"
DATE=`date +%Y%m%d`
DATEDB=`date +%Y-%m-%d`
BACKUP_SERVER="`hostname -s  | tr '[A-Z]' '[a-z]'`"  # this server connects to all other to download filesystems and create remote snapshot backups
OTHER_BACKUP_SERVER="SERVER2 SERVER3"
LOGALL_FILE="$LOG_PATH/$APP_NAME/all.$DATE.log"

if [[ `date +%u` -eq 6 ]]
then
        IN_WEEKEND=true
else
        IN_WEEKEND=false
fi

if ! $IN_WEEKEND
then
        OPTION="${OPTION} --timeout=600 "
        LIMIT_HOUR_FOR_RSYNC="6"
else
        OPTION="${OPTION} --timeout=14400 "
        LIMIT_HOUR_FOR_RSYNC=""
fi

## Log environment
if [ ! -d "$LOG_PATH/$APP_NAME" ]
then
        echo "Creating log directory"
        ${MKDIR} -p "$LOG_PATH/$APP_NAME"
fi

